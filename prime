fn is_prime(x: u32) -> bool {
    if x <= 1 {return false;}
    
    for i in 2..=((x as f64).sqrt() as u32) {
        if x % i == 0 {return false;}
    }
    true
}

fn main() {
    let num = 13;
    if is_prime(num) {println!("{} є простим числом", num);} 
    else {println!("{} не є простим числом", num);}
    
    let num2 = 12;
    if is_prime(num2) {println!("{} є простим числом", num2);}
    else {println!("{} не є простим числом", num2);}
}




Спочатку я створив функцію is_prime, яка приймає число типу u32 і повертає bool.

Перевірив, чи число менше або дорівнює 1. Оскільки числа менші або рівні 1 не є простими, я одразу повертаю false для таких випадків.

Потім я використав цикл for, щоб пройти по всіх числах від 2 до квадратного кореня числа (sqrt()). Я вибрав цей діапазон, бо досить перевірити числа тільки до √x, щоб дізнатися, чи є у числа інші дільники. 

Для цього я скористався методом sqrt(), який перетворює значення на f64, і потім привів його до u32.

У самому циклі я використовую оператор %, щоб перевірити, чи ділиться число без залишку на поточне значення лічильника i. Якщо знаходжу таке число, яке ділиться без залишку, то воно не є простим, тому повертаю false.

Якщо цикл закінчився і жоден дільник не був знайдений, значить, число є простим, тому повертаю true.

У функції main() я створив змінну num і перевіряю, чи є вона простою за допомогою функції is_prime. Потім я виводжу результат на екран через println!, щоб показати, чи є це число простим чи ні. Те ж саме роблю для іншого числа num2.
